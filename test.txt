document.addEventListener("keydown", function (event) {
  if (event.altKey && event.key === "n") {
    event.preventDefault();

    const questionElement = document.querySelector(
      '.ql-editor[aria-labelledby="question-data"]'
    );
    let questionText = questionElement ? questionElement.innerText : "";

    const aceLayer = document.querySelector(".ace_layer.ace_text-layer");
    const allLines = aceLayer ? aceLayer.querySelectorAll(".ace_line") : [];
    let codeText = "";
    allLines.forEach(function (line) {
      codeText += line.innerText + "\n\n";
    });

    const optionsColorElements = document.querySelectorAll(".options-color");
    let optionsText = "";
    optionsColorElements.forEach((option, index) => {
      optionsText += `${index + 1}. ${option.innerText
        .replace(/\n{3,}/g, "\n")
        .trim()}\n`;
    });

    let optionsHeader = "\n\nThese are the options:\n\n";
    let finalText = `${questionText.trim()}\n\n${codeText.trim()}${optionsHeader}${optionsText.trim()}\n\n`;

    navigator.clipboard.writeText(finalText.trim()).catch((err) => {});
  }
});

document.addEventListener("keydown", (event) => {
  if (event.getModifierState("CapsLock")) {
    event.preventDefault();
    handleDoubleClickOnSpecificContainer();
  }
});

async function handleDoubleClickOnSpecificContainer() {
  try {
    const gptGeneratedContentLines = document.querySelectorAll(
      ".ace_content .ace_line"
    );
    const questionContentContainer = document.querySelector(
      'div[aria-labelledby="each-type-question"]'
    );
    const headerSnippet = document.querySelector(
      '[aria-labelledby="header-header"]'
    );
    const footerSnippet = document.querySelector(
      '[aria-labelledby="footer-header"]'
    );

    if (!gptGeneratedContentLines.length || !questionContentContainer) {
      return;
    }

    let headerText = "";
    let footerText = "";

    if (headerSnippet) {
      headerText = `\n${headerSnippet.textContent.trim()}\n`;
    }
    if (footerSnippet) {
      footerText = `\n${footerSnippet.textContent.trim()}\n`;
    }

    const gptTextToCopy =
      "\n" +
      Array.from(gptGeneratedContentLines)
        .map((el) => el.textContent.trim())
        .join("\n");

    let modifiedText = gptTextToCopy;

    if (headerText) {
      modifiedText = modifiedText.replace(
        /(#include\s*<\S+>)/,
        `${headerText}\n$1\n`
      );
    }
    if (footerText) {
      modifiedText = modifiedText.replace(
        /(int\s+main\s*\(\)\s*\{)/,
        `\n${footerText}\n$1\n`
      );
    }

    const completeTextToCopy = `${modifiedText}`;

    const instructionCardContainer = document.querySelector(
      '[aria-labelledby="instruction-card"]'
    );

    let finalPromptText = "";

    if (!instructionCardContainer) {
      finalPromptText = `${questionContentContainer.innerText
        .replace(/\n{3,}/g, "\n")
        .trim()} ${completeTextToCopy} \n please solve the question in a simple way in java`;
    } else {
      finalPromptText = `${questionContentContainer.innerText
        .replace(/\n{3,}/g, "\n")
        .trim()} \n\n use these Whitelist keyword compulsory while solving the problem  ${instructionCardContainer.innerText
        .replace(/\n+/g, " ")
        .trim()} ${completeTextToCopy}`;
    }

    const extractedText = extractAndFormatText();
    if (extractedText) {
      finalPromptText += `\n\n${extractedText}`;
    }

    await navigator.clipboard.writeText(finalPromptText);
  } catch (error) {
    console.error("Error in handleDoubleClickOnSpecificContainer:", error);
  }
}

function extractAndFormatText() {
  const resultSummaryElement = document.querySelector(
    '[aria-labelledby="tc-message"]'
  );
  const resultSummary = resultSummaryElement
    ? resultSummaryElement.innerText
    : "";

  const compilerMessageElement = document.querySelector(
    'pre[aria-labelledby="tc-message"]'
  );
  const compilerMessage = compilerMessageElement
    ? compilerMessageElement.innerText
    : "";

  const testCases = document.querySelectorAll(
    '[aria-labelledby="tc-sample-outer-cont"]'
  );

  let formattedText = "";

  if (resultSummary) {
    formattedText += `Result Summary: ${resultSummary}\n`;
  }

  if (compilerMessage) {
    formattedText += `\nCompiler Message:\n${compilerMessage}\n`;
  }

  testCases.forEach((testCase, index) => {
    const testCaseStatusElement = testCase.querySelector(
      '[aria-labelledby="tc-sample-header"]'
    );
    const testCaseStatus = testCaseStatusElement
      ? testCaseStatusElement.innerText
      : "";

    const expectedOutputElement = testCase.querySelector(
      'pre[aria-labelledby="tc-field-message"]'
    );
    const expectedOutput = expectedOutputElement
      ? expectedOutputElement.innerText
      : "";

    const actualOutputElements = testCase.querySelectorAll(
      'pre[aria-labelledby="tc-field-message"]'
    );
    const actualOutput =
      actualOutputElements.length > 1
        ? actualOutputElements[1].innerText
        : "";

    if (testCaseStatus || expectedOutput || actualOutput) {
      formattedText += `\n${
        testCaseStatus || `Testcase ${index + 1} - Status not available`
      }\nExpected Output:\n${
        expectedOutput || "No expected output"
      }\nActual Output:\n${actualOutput || "No Output"}\n`;
    }
  });

  return formattedText.trim() ? formattedText : "";
}
