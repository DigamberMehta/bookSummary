import React, { useRef, useEffect, useState } from "react";
import HTMLFlipBook from "react-pageflip";
import TopBar from "./TopBar";
import AudioControl from "./AudioControl";
import EditModal from "./EditModal";

const Book = ({ extractedPages, pageFlipRef, currentPage, summaries, handleAudio, playingType, audioStatus, loadingType, bookmarks, isCurrentPageBookmarked, toggleBookmark, selectedColor, setSelectedColor, colors, goToBookmark, handleFlip, bookId, bookTitle, bookCoverPage, bookEndCoverPage, handleSaveMetadataFromBook }) => {
  const flipSoundRef = useRef(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    flipSoundRef.current = new Audio("/sound/sound.mp3");
  }, []);

  if (!extractedPages) return null;

  const totalPages = 2 + extractedPages.length * 2;
  const numberOfLines = 5; // Number of border lines
  const lineSpacing = 3; // Spacing between lines - reduced for closer lines
  const lineColor = 'rgb(220, 220, 220)'; // Light gray color


  // Function to generate layered border style for left page with gaps and light gray color
  const getLeftPageBorderStyle = () => {
    let boxShadow = '';
    for (let i = 1; i <= numberOfLines; i++) {
      boxShadow += `-1px 0 0 ${lineColor}, ${-i * lineSpacing}px ${i * lineSpacing}px 0 ${lineColor}, `; // Vertical and horizontal offset for spacing, light gray color
    }
    boxShadow = boxShadow.slice(0, -2);
    return boxShadow;
  };

  // Function to generate layered border style for right page with gaps and light gray color
  const getRightPageBorderStyle = () => {
    let boxShadow = '';
    for (let i = 1; i <= numberOfLines; i++) {
      boxShadow += `1px 0 0 ${lineColor}, ${i * lineSpacing}px ${i * lineSpacing}px 0 ${lineColor}, `; // Vertical and horizontal offset for spacing, light gray color
    }
    boxShadow = boxShadow.slice(0, -2);
    return boxShadow;
  };

  const goPrevious = () => {
    pageFlipRef.current.pageFlip().flipPrev("top");
  };

  const goNext = () => {
    pageFlipRef.current.pageFlip().flipNext("top");
  };

  return (
    <div className="flex flex-col items-center min-h-screen bg-[url(/background/background.jpeg)] bg-cover bg-center p-8">
      <TopBar
        colors={colors}
        selectedColor={selectedColor}
        setSelectedColor={setSelectedColor}
        bookmarks={bookmarks}
        goToBookmark={goToBookmark}
      />

      <div className="w-full max-w-4xl mx-auto mt-2 mb-4 p-4 flex flex-col items-center gap-2 backdrop-blur-sm bg-white/10 rounded-lg">
        <button
          onClick={() => setIsModalOpen(true)}
          className="px-4 py-2 text-white rounded-md text-sm"
        >
          Update Book Details
        </button>
        <h2 className="text-4xl font-bold text-white text-center bg-transparent">
         TITTLE :  {bookTitle}
        </h2>
      </div>

      <EditModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        initialTitle={bookTitle}
        initialCover={bookCoverPage}
        initialEndCover={bookEndCoverPage}
        onSave={handleSaveMetadataFromBook}
      />

      <HTMLFlipBook
        width={550}
        height={700}
        showCover={true}
        disableFlipByClick={true}
        useMouseEvents={true}
        useTouchEvents={true}
        onFlip={(e) => {
          if (flipSoundRef.current) {
            flipSoundRef.current.currentTime = 0;
            flipSoundRef.current.play().catch((error) => {
              console.error("Failed to play flip sound:", error);
            });
          }
          handleFlip(e);
        }}
        ref={pageFlipRef}
      >
        {/* Front Cover */}
        <div className={`w-full h-full bg-[url(https://miblart.com/wp-content/uploads/2020/08/ZXAfJR0M-663x1024-1.jpg)] flex flex-col items-center justify-center text-center rounded-lg overflow-hidden bg-cover bg-center bg-no-repeat`}></div>

        {/* Content Pages */}
        {extractedPages.flatMap((page, index) => [
          // Left Page (Original)
          <div
            key={`left-${index}`}
            className="w-full h-full bg-white flex flex-col rounded-xl overflow-hidden left-page page"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex justify-between items-start p-6 pb-4">
              <span className="text-gray-500 font-medium">
                Page {page.pageNumber}
              </span>
              <AudioControl
                text={page.text}
                type="book"
                handleAudio={handleAudio}
                playingType={playingType}
                audioStatus={audioStatus}
                loadingType={loadingType}
                isBookmarked={isCurrentPageBookmarked()}
                toggleBookmark={toggleBookmark}
              />
            </div>
            <div className="flex-1 overflow-auto px-6 pb-6">
              <p className="text-gray-700 leading-relaxed text-justify text-xs">
                {page.text}
              </p>
            </div>
          </div>,

          // Right Page (Summary)
          <div
            key={`right-${index}`}
            className="w-full h-full bg-gray-50 flex flex-col rounded-xl overflow-hidden right-page page"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex justify-between items-start p-6 pb-4">
              <span className="text-blue-500 font-medium">AI Summary</span>
              <AudioControl
                text={summaries[page.pageNumber]}
                type="summary"
                handleAudio={handleAudio}
                playingType={playingType}
                audioStatus={audioStatus}
                loadingType={loadingType}
              />
            </div>
            <div className="flex-1 overflow-auto px-6 pb-6">
              <p className="text-gray-700 leading-relaxed text-justify text-xs">
                {summaries[page.pageNumber] || (
                  <span className="text-gray-400">Generating summary...</span>
                )}
              </p>
            </div>
          </div>,
        ])}

        {/* Back Cover */}
        <div className={`w-full h-full bg-[url(https://miblart.com/wp-content/uploads/2020/08/ZXAfJR0M-663x1024-1.jpg)] flex flex-col items-center justify-center text-center rounded-lg overflow-hidden bg-cover bg-center bg-no-repeat`}>
          <div className="bg-black bg-opacity-50 p-8 rounded-lg">
            <h2 className="text-3xl font-bold text-white mb-4">The End</h2>
            <p className="text-lg text-white">Continue your journey with</p>
            <p className="text-2xl text-blue-400 font-mono mt-2">
              Storybook AI
            </p>
          </div>
        </div>
      </HTMLFlipBook>

      {/* Navigation Controls */}
      <div className="flex items-center gap-4 mt-4">
        <button
          onClick={goPrevious}
          disabled={currentPage === 0}
          className="px-4 py-2 bg-blue-600 text-white rounded-[50%] hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
        >
          <i className="fa-solid fa-chevron-left cursor-pointer"></i>
        </button>

        <span className="text-white font-medium">
          {currentPage > 0 && currentPage <= extractedPages.length
            ? `Page ${currentPage} of ${extractedPages.length}`
            : "Cover Page"}
        </span>

        <button
          onClick={goNext}
          disabled={currentPage === totalPages - 1}
          className="px-4 py-2 bg-blue-600 text-white rounded-[50%] hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
        >
          <i className="fa-solid fa-chevron-right cursor-pointer"></i>
        </button>
      </div>

      <style jsx>{`
        .left-page.page {
          border-left: 1px solid black;
          box-shadow: ${getLeftPageBorderStyle()}; /* Apply boxShadow from function */
          font-family: 'Courier New', Courier, monospace;
        }
        .right-page.page {
          border-right: 1px solid black;
          box-shadow: ${getRightPageBorderStyle()}; /* Apply boxShadow from function */
          font-family: 'Courier New', Courier, monospace;
        }
      `}</style>
    </div>
  );
};

export default Book;



//deep seek
import React, { useRef, useEffect, useState } from "react";
import HTMLFlipBook from "react-pageflip";
import TopBar from "./TopBar";
import AudioControl from "./AudioControl";
import EditModal from "./EditModal";


const Book = ({
  extractedPages,
  pageFlipRef,
  currentPage,
  summaries,
  handleAudio,
  playingType,
  audioStatus,
  loadingType,
  bookmarks,
  isCurrentPageBookmarked,
  toggleBookmark,
  selectedColor,
  setSelectedColor,
  colors,
  goToBookmark,
  handleFlip,
  bookId,
  bookTitle,
  bookCoverPage,
  bookEndCoverPage,
  handleSaveMetadataFromBook
}) => {
  const flipSoundRef = useRef(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    flipSoundRef.current = new Audio("/sound/sound.mp3");
  }, []);

  if (!extractedPages) return null;

  const totalPages = 2 + extractedPages.length * 2;

  const goPrevious = () => {
    pageFlipRef.current.pageFlip().flipPrev("top");
  };

  const goNext = () => {
    pageFlipRef.current.pageFlip().flipNext("top");
  };

  // Function to generate multiple layered borders
  const generateLayeredBorders = (index, side) => {
    const borders = [];
    const totalLayers = Math.min(index + 1, 5); // Max 5 layers
    for (let i = 0; i < totalLayers; i++) {
      const width = 1 + i;
      const opacity = 0.3 - (i * 0.05);
      const offset = width * 2; // Spacing between layers
      borders.push(
        `inset ${side === 'left' ? '-' : ''}${offset}px 0 0 rgba(0, 0, 0, ${opacity})`
      );
    }
    return borders.join(', ');
  };

  return (
    <div className="flex flex-col items-center min-h-screen bg-[url(/background/background.jpeg)] bg-cover bg-center p-8">
      <TopBar
        colors={colors}
        selectedColor={selectedColor}
        setSelectedColor={setSelectedColor}
        bookmarks={bookmarks}
        goToBookmark={goToBookmark}
      />

      <div className="w-full max-w-4xl mx-auto mt-2 mb-4 p-4 flex flex-col items-center gap-2 backdrop-blur-sm bg-white/10 rounded-lg">
        <button
          onClick={() => setIsModalOpen(true)}
          className="px-4 py-2 text-white rounded-md text-sm"
        >
          Update Book Details
        </button>
        <h2 className="text-4xl font-bold text-white text-center bg-transparent">
          TITTLE : {bookTitle}
        </h2>
      </div>

      <EditModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        initialTitle={bookTitle}
        initialCover={bookCoverPage}
        initialEndCover={bookEndCoverPage}
        onSave={handleSaveMetadataFromBook}
      />

      <HTMLFlipBook
        width={550}
        height={700}
        showCover={true}
        disableFlipByClick={true}
        useMouseEvents={true}
        useTouchEvents={true}
        onFlip={(e) => {
          if (flipSoundRef.current) {
            flipSoundRef.current.currentTime = 0;
            flipSoundRef.current.play().catch(console.error);
          }
          handleFlip(e);
        }}
        ref={pageFlipRef}
      >
        {/* Front Cover */}
        <div className={`w-full h-full bg-[url(https://miblart.com/wp-content/uploads/2020/08/ZXAfJR0M-663x1024-1.jpg)] flex flex-col items-center justify-center text-center rounded-lg overflow-hidden bg-cover bg-center bg-no-repeat`}></div>

        {/* Content Pages */}
        {extractedPages.flatMap((page, index) => [
          // Left Page (Original)
          <div
            key={`left-${index}`}
            className="left-page page"
            onClick={(e) => e.stopPropagation()}
            style={{
              boxShadow: generateLayeredBorders(index, 'left')
            }}
          >
            <div className="flex justify-between items-start p-6 pb-4">
              <span className="text-gray-500 font-medium">
                Page {page.pageNumber}
              </span>
              <AudioControl
                text={page.text}
                type="book"
                handleAudio={handleAudio}
                playingType={playingType}
                audioStatus={audioStatus}
                loadingType={loadingType}
                isBookmarked={isCurrentPageBookmarked()}
                toggleBookmark={toggleBookmark}
              />
            </div>
            <div className="flex-1 overflow-auto px-6 pb-6">
              <p className="text-gray-700 leading-relaxed text-justify text-[16px]">
                {page.text}
              </p>
            </div>
          </div>,

          // Right Page (Summary)
          <div
            key={`right-${index}`}
            className="right-page page"
            onClick={(e) => e.stopPropagation()}
            style={{
              boxShadow: generateLayeredBorders(index, 'right')
            }}
          >
            <div className="flex justify-between items-start p-6 pb-4">
              <span className="text-blue-500 font-medium">AI Summary</span>
              <AudioControl
                text={summaries[page.pageNumber]}
                type="summary"
                handleAudio={handleAudio}
                playingType={playingType}
                audioStatus={audioStatus}
                loadingType={loadingType}
              />
            </div>
            <div className="flex-1 overflow-auto px-6 pb-6">
              <p className="text-gray-700 leading-relaxed text-justify text-[16px]">
                {summaries[page.pageNumber] || (
                  <span className="text-gray-400">Generating summary...</span>
                )}
              </p>
            </div>
          </div>
        ])}

        {/* Back Cover */}
        <div className={`w-full h-full bg-[url(https://miblart.com/wp-content/uploads/2020/08/ZXAfJR0M-663x1024-1.jpg)] flex flex-col items-center justify-center text-center rounded-lg overflow-hidden bg-cover bg-center bg-no-repeat`}>
          <div className="bg-black bg-opacity-50 p-8 rounded-lg">
            <h2 className="text-3xl font-bold text-white mb-4">The End</h2>
            <p className="text-lg text-white">Continue your journey with</p>
            <p className="text-2xl text-blue-400 font-mono mt-2">
              Storybook AI
            </p>
          </div>
        </div>
      </HTMLFlipBook>

      {/* Navigation Controls */}
      <div className="flex items-center gap-4 mt-4">
        <button
          onClick={goPrevious}
          disabled={currentPage === 0}
          className="px-4 py-2 bg-blue-600 text-white rounded-[50%] hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
        >
          <i className="fa-solid fa-chevron-left cursor-pointer"></i>
        </button>

        <span className="text-white font-medium">
          {currentPage > 0 && currentPage <= extractedPages.length
            ? `Page ${currentPage} of ${extractedPages.length}`
            : "Cover Page"}
        </span>

        <button
          onClick={goNext}
          disabled={currentPage === totalPages - 1}
          className="px-4 py-2 bg-blue-600 text-white rounded-[50%] hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
        >
          <i className="fa-solid fa-chevron-right cursor-pointer"></i>
        </button>
      </div>
    </div>
  );
};

export default Book;

/// style
.page {
  width: 100%;
  height: 100%;
  background-color: white;
  display: flex;
  flex-direction: column;
  border-color: rgba(0, 0, 0, 0.3);
  border-style: solid;
  border-width: 0;
  position: relative;
  overflow: hidden;
}

/* Left page specific styles */
.left-page {
  border-left-width: 3px;
  border-right-width: 0;
}

/* Right page specific styles */
.right-page {
  border-right-width: 3px;
  border-left-width: 0;
}