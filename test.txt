import express from 'express';
import Book from '../models/Book.js';
import mongoose from 'mongoose';

const router = express.Router();

// Save extracted text
router.post('/books', async (req, res) => {
  try {
    const { originalPdf, pages } = req.body;
    
    const newBook = new Book({
      originalPdf,
      pages: pages.map(page => ({
        pageNumber: page.pageNumber,
        text: page.text
      }))
    });

    await newBook.save();
    res.status(201).json(newBook);
  } catch (error) {
    res.status(500).json({ message: 'Error saving book', error });
  }
});

// Update summary for a page
router.put('/books/:bookId/pages/:pageNumber/summary', async (req, res) => {
  try {
    const book = await Book.findById(req.params.bookId);
    if (!book) return res.status(404).json({ message: 'Book not found' });

    const page = book.pages.find(p => p.pageNumber === parseInt(req.params.pageNumber));
    if (!page) return res.status(404).json({ message: 'Page not found' });

    page.summary = req.body.summary;
    await book.save();
    
    res.json(book);
  } catch (error) {
    res.status(500).json({ message: 'Error updating summary', error });
  }
});

// Update audio for a page
router.put('/books/:bookId/pages/:pageNumber/audio', async (req, res) => {
  try {
    const book = await Book.findById(req.params.bookId);
    if (!book) return res.status(404).json({ message: 'Book not found' });

    const page = book.pages.find(p => p.pageNumber === parseInt(req.params.pageNumber));
    if (!page) return res.status(404).json({ message: 'Page not found' });

    page.audio = req.body.audio;
    await book.save();
    
    res.json(book);
  } catch (error) {
    res.status(500).json({ message: 'Error updating audio', error });
  }
});

// Get all books
router.get('/books', async (req, res) => {
  try {
    const books = await Book.find().sort({ createdAt: -1 });
    res.json(books);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching books', error });
  }
});
// Get single book by ID
router.get('/books/:id', async (req, res) => {
    try {
      // Validate ObjectID format
      if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
        return res.status(400).json({ success: false, message: 'Invalid book ID format' });
      }
  
      const book = await Book.findById(req.params.id);
      
      if (!book) {
        return res.status(404).json({ 
          success: false, 
          message: 'Book not found' 
        });
      }
  
      res.status(200).json({
        success: true,
        data: book
      });
  
    } catch (error) {
      console.error('Error fetching book:', error);
      res.status(500).json({
        success: false,
        message: 'Server error while fetching book',
        error: error.message // Send only the error message in production
      });
    }
  });
  
export default router;